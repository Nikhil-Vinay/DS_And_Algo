> Fenwick tree is also known as bit index tree (BIT)

> Fenwick tree is also used for query and update problem similar to segment tree.
> Segment tree needs O(2*n) space for storing tree array. Fenwick tree takes O(n) space to store tree array.
> Similar to segment tree, fenwick tree also takes O(logn) tie in query and update.
> Fenwick tree build operation is done by update operation only.

> Fenwick tree is laso called bit index tree (BIT tree).

> Fenwick tree parent and child is decided by bit operation.

> Root node of fenwick tree is 0. It is dummy node.
> Fenwick tree always starts from index-1.
> if there are n elements in array then we create fenwick tree of length (n+1). first index (0) is reserved for root.

> Any nodes parent can be get by fliiping least set bit to 0

> 0(0000) = root node
> 1(0001) = 0 + 2^0    = starts from 0, 1 element (0 - 0) : Parent is 0 
  2(0010) = 0 + 2^1    = starts from 0, 2 element (0 - 1) : Parent is 0
  3(0011) = 2^1 + 2^0  = starts from 2, 1 element (2 - 2) : Parent is 1
  4(0100) = 0 + 2^2    = starts from 0, 4 element (0 - 3) : Parent is 0
  5(0101) = 2^2 + 2^0  = starts from 4, 1 element (4 - 4) : Parent is 4
  6(0110) = 2^2 + 2^1  = starts from 4, 2 element (4 - 5) : Parent is 4
  7(0111) = 2^2 + 2^1 + 2^0 = starts from 6, 1 element (6 - 6): Parent is 6
  8(1000) = 0 + 2^3    = starts from 0, 8 elements (0 - 7) : Parent is 0

> n = n & (-n)  // makes the least set bit 0
> Updation: 
  Updation happen by n += (n & (-n))
  Update at index (3) with 5.
  n = 3 = 0011.  // tree[3] = 5
  n += (n & (-n)) = 0011 + 0010 = 5   // tree[5] = 5
  n += (n & (-n)) = 0101 + 0100 = 9   // It is greater than 8 so loop will terminate.

> Query:
  Query happens by n -= (n & (-n))
   
   
